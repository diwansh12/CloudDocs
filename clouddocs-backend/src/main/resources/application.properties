# application.properties (backend) - PRODUCTION OPTIMIZED & VALIDATION ERROR-FREE

# ===== SERVER CONFIGURATION =====
server.port=${PORT:8080}
server.servlet.context-path=/api

# ✅ PRODUCTION: HTTP/2 and compression support
server.http2.enabled=true
server.compression.enabled=true
server.compression.mime-types=application/json,text/html,text/xml,text/plain,application/javascript,text/css
server.compression.min-response-size=1024

# ✅ ENHANCED: Optimized Tomcat for production load
server.tomcat.threads.max=100
server.tomcat.threads.min-spare=20
server.tomcat.accept-count=100
server.tomcat.max-connections=8192
server.tomcat.connection-timeout=20000

# ✅ SECURITY: Session cookie configuration
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=strict

# ===== DATABASE CONFIGURATION =====
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ✅ ENHANCED: Optimized connection pool for production
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.leak-detection-threshold=15000
spring.datasource.hikari.initialization-fail-timeout=-1
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.register-mbeans=true

# ===== JPA/HIBERNATE CONFIGURATION =====
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.defer-datasource-initialization=true
spring.jpa.show-sql=false

# ✅ CRITICAL FIXES: Disable Hibernate caches to prevent stale data
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.internal.NoCachingRegionFactory

# ✅ CRITICAL FIXES: Force immediate transaction commits
spring.jpa.properties.hibernate.connection.autocommit=false
spring.jpa.properties.hibernate.transaction.flush_before_completion=true
spring.jpa.properties.hibernate.transaction.auto_close_session=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ✅ CRITICAL: OffsetDateTime and timezone configuration
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.timezone.default_storage=NORMALIZE

# ✅ FIX: Disable Open Session in View to prevent lazy loading issues
spring.jpa.open-in-view=false

# ✅ DEBUGGING: Additional properties for troubleshooting
spring.jpa.properties.hibernate.generate_statistics=false
spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=1000

# ✅ VALIDATION: Disable DDL validation for faster startup
spring.jpa.properties.hibernate.validator.apply_to_ddl=false
spring.jpa.properties.hibernate.validator.autoregister_listeners=false

# ===== JACKSON/JSON CONFIGURATION =====
# ✅ CRITICAL: OffsetDateTime serialization configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
spring.jackson.serialization.fail-on-empty-beans=false



# ===== EMAIL CONFIGURATION =====
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# ===== FILE STORAGE =====
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.enabled=true

# ===== LOGGING CONFIGURATION =====
# ✅ ENHANCED LOGGING: Debug timestamp and transaction issues

logging.level.com.clouddocs.backend.service.WorkflowService=DEBUG
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.transaction=DEBUG
logging.level.org.springframework.orm.jpa=DEBUG
logging.level.org.springframework.data.jpa=DEBUG
logging.level.org.hibernate.LazyInitializationException=DEBUG

# ===== ACTUATOR/MONITORING CONFIGURATION =====
# ✅ FIXED: Updated to use correct property names
management.endpoints.web.exposure.include=health,info,metrics,caches,beans
management.endpoint.health.show-details=always
management.endpoint.metrics.access=unrestricted
management.endpoint.caches.access=unrestricted
management.health.db.enabled=true
management.health.diskspace.enabled=true

# ===== PERFORMANCE OPTIMIZATIONS =====
# Disable unnecessary features for faster startup
spring.devtools.restart.enabled=false

# ===== TASK SCHEDULING CONFIGURATION =====
spring.task.scheduling.pool.size=5
spring.task.execution.pool.core-size=10
spring.task.execution.pool.max-size=50
spring.task.execution.pool.queue-capacity=100
spring.task.execution.pool.allow-core-thread-timeout=true
spring.task.execution.pool.keep-alive=60s
spring.task.execution.thread-name-prefix=workflow-task-

# ===== TRANSACTION CONFIGURATION =====
spring.transaction.default-timeout=30
spring.transaction.rollback-on-commit-failure=true

# ===== ERROR HANDLING =====
server.error.include-exception=false

# ===== LOCALE AND INTERNATIONALIZATION =====
spring.web.locale=en_US
spring.web.locale-resolver=fixed

# ===== GRACEFUL SHUTDOWN =====
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=20s

# ===== JMX CONFIGURATION =====
spring.jmx.enabled=false

# ===== BANNER CONFIGURATION =====
spring.main.banner-mode=log
spring.application.name=CloudDocs Backend API

# ===== PROFILE CONFIGURATION =====
spring.profiles.active=${SPRING_PROFILES_ACTIVE:production}

# ===== CUSTOM APPLICATION PROPERTIES =====
# Note: These are custom properties used by the application
# They require corresponding @ConfigurationProperties classes or @Value annotations

# JWT Configuration (requires JwtProperties class)
app.jwtSecret=${JWT_SECRET}
app.jwtExpirationMs=86400000

# Twilio Configuration (requires TwilioProperties class)
app.twilio.account-sid=${TWILIO_ACCOUNT_SID}
app.twilio.auth-token=${TWILIO_AUTH_TOKEN}
app.twilio.phone=${TWILIO_PHONE}

# CORS Configuration (requires CorsProperties class)
app.cors.allowed-origins=${CORS_ORIGINS:https://cloud-docs-tan.vercel.app,http://localhost:3000}
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# File Upload Configuration (requires FileUploadProperties class)
# ✅ File upload configuration
file.upload-dir=./uploads

# ✅ Enable debug logging to verify setup
logging.level.com.clouddocs.backend.config.WebMvcConfig=DEBUG

# Firebase Configuration (requires FirebaseProperties class)
app.firebase.service-account-key=${FIREBASE_SERVICE_ACCOUNT_KEY}

# Workflow Configuration (requires WorkflowProperties class)
app.workflow.default-sla-hours=24
app.workflow.max-concurrent-workflows=100
app.workflow.auto-cleanup-days=90

# Analytics Configuration (requires AnalyticsProperties class)
app.analytics.cache-duration=300
app.analytics.max-date-range-days=365

# Notification Configuration (requires NotificationProperties class)
app.notifications.email-enabled=true
app.notifications.sms-enabled=true
app.notifications.batch-size=50

# Audit Configuration (requires AuditProperties class)
app.audit.enabled=true
app.audit.retention-days=365
app.audit.async-enabled=true

# Rate Limiting Configuration (requires RateLimitProperties class)
app.rate-limit.enabled=true
app.rate-limit.requests-per-minute=1000
app.rate-limit.burst-capacity=1500

# ✅ AI Feature Flags - ALL DISABLED by default (100% safe)
ai.search.enabled=true
ai.chat.enabled=true
ai.embedding.enabled=true


# ✅ OpenAI Provider (Primary - Highest Quality)
ai.providers.openai.enabled=true
ai.providers.openai.priority=1
openai.api.key=${OPENAI_API_KEY}

# ✅ Cohere Provider (Secondary - Free Tier Backup)
ai.providers.cohere.enabled=true
ai.providers.cohere.priority=2
ai.providers.cohere.api-key=${COHERE_API_KEY:}
ai.providers.cohere.model=embed-english-v3.0

# ✅ Provider Health Check Settings
ai.providers.health-check.enabled=true
ai.providers.health-check.interval=300000

# ✅ Fallback Strategy Configuration
ai.fallback.enabled=true
ai.fallback.max-retries=3
ai.fallback.retry-delay=2000

# ===== AI SERVICE LOGGING =====
# ✅ Enhanced logging for AI services debugging
logging.level.com.clouddocs.backend.service.OpenAIService=DEBUG
logging.level.com.clouddocs.backend.service.AISearchService=DEBUG
logging.level.com.clouddocs.backend.service.ai.MultiProviderAIService=INFO
logging.level.com.clouddocs.backend.service.ai.OpenAIProvider=INFO
logging.level.com.clouddocs.backend.service.ai.CohereProvider=INFO


# ===== OCR CONFIGURATION =====
# OCR Service Settings (with environment variable fallbacks)
ocr.enabled=${OCR_ENABLED}
ocr.timeout=${OCR_TIMEOUT}
ocr.max-file-size=${OCR_MAX_FILE_SIZE}

# Tesseract Configuration (using environment variables)
tesseract.path=${TESSERACT_PATH}
tesseract.datapath=${TESSERACT_DATAPATH}
tesseract.language=eng
tesseract.psm=1
tesseract.oem=3

# ===== OCR SPECIFIC LOGGING =====
logging.level.com.clouddocs.backend.service.OCRService=${LOGGING_LEVEL_COM_CLOUDDOCS_BACKEND_SERVICE_OCRSERVICE:DEBUG}
logging.level.com.clouddocs.backend.controller.OCRController=${LOGGING_LEVEL_COM_CLOUDDOCS_BACKEND_CONTROLLER_OCRCONTROLLER:DEBUG}

# Enable controller mapping logs
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=INFO
logging.level.com.clouddocs.backend.controller=DEBUG
logging.level.org.springframework.boot.web.servlet.ServletRegistrationBean=INFO

# ✅ Enable detailed logging for debugging

logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=INFO
logging.level.root=INFO



# ✅ Enable request/response logging
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG



spring.servlet.multipart.resolve-lazily=true
spring.servlet.multipart.file-size-threshold=2MB


server.tomcat.keep-alive-timeout=30000

# ✅ HTTP request handling
server.tomcat.max-http-form-post-size=10MB
server.tomcat.max-swallow-size=10MB

# ✅ Enable detailed error logging
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param

# ✅ Logging for debugging
logging.level.com.clouddocs.backend=INFO
logging.level.org.apache.tomcat.util.http=WARN
logging.level.org.apache.coyote.http11=WARN


# ===== Redis Configuration =====
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.username=${REDIS_USERNAME}
spring.data.redis.database=0
spring.data.redis.timeout=60000ms

# Redis Connection Pool
spring.data.redis.lettuce.pool.max-active=20
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.pool.max-wait=-1ms

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=1800000
spring.cache.redis.cache-null-values=false

# Cache Logging
logging.level.com.clouddocs.backend.service.SmartCachingService=INFO


